# import math
# import random
# from decimal import Decimal
# import decimal
from fractions import Fraction

# Разнородные типы преобразуются
# print(3.14 + 40)                # Преобразование целого в число с плавающей точкой
# print(int(3.1415))              # Сокращает число с плавающей точкой до целого
# print(float(3))                 # Преобразует целое число в число с плавающей точкой


# Переменные и базовые выражения
# a = 3                   # Имя создается: не объявляется заранее
# b = 4
#
# print(a + 1, a - 1)
# print(b * 3, b / 2)
# print(a % 2, b ** 2)
# print(c * 2)
# print(b / 2 + a)
# print(b / (2.0 + a))


# Форматы числового отображения
# print(1 / 2.0)
#
# num = 1 / 3.0
# print(num)                  # Явный вывод
# print('%e' % num)           # Выражение форматирования строк
# print('%4.2f' % num)        # Альтернативный формат с плавающей точкой
# print('{0:4.2f}'.format(num))       # Метод форматирования строк: Python 2.6, 3.0 и последующие версии
#
# repr('spam')                # Используется интерактивным выводом: форма как в коде
# str('spam')                 # Используется print: форма, дружественная к пользователю


# Сравнения: нормальные и сцепленные
# print(1 < 2)
# print(2 >= 1.0)
# print(2.0 == 2.0)
# print(2.0 != 2.0)
#
# X = 2
# Y = 4
# Z = 6
#
# print(X < Y < Z)                # Сцепленные сравнения: проверки вхождения в диапазон
# print(X < Y and Y < Z)
#
# print(X < Y > Z)
# print(X < Y and Y > Z)
# print(1 < 2 < 3.0 < 4)
# print(1 > 2 > 3.0 > 4)
# print(1 == 2 < 3)
# print(1.1 + 2.2 == 3.3)
# print(1.1 + 2.2)                # Близко к 3.3, но не точно: ограниченная точность
# print(int(1.1 + 2.2) == int(3.3))   # Нормально в случае преобразования: см. также round, float, trunc


# Деление: классическое, с округлением в меньшую сторону и настоящее
# print(X / Y)
# print(X // Y)
# print(10 / 4)
# print(10 / 4.0)
# print(10 // 4)
# print(10 // 4.0)


# Округление в меньшую сторону или усечение
# print(math.floor(2.5))              # Ближайшее меньшее значение
# print(math.floor(-2.5))
# print(math.trunc(2.5))              # Усечение дробной части (в сторону нуля)
# print(math.trunc(-2.5))
#
# print(5 / 2, 5 / -2)
# print(5 // 2, 5 // -2)               # Усекает в меньшую сторону: до первого меньшего целого
#
# print(5 / 2.0, 5 / -2.0)
# print(5 // 2.0, 5 // -2.0)
#
# print(math.trunc(5 / -2))           # Усекает вместо округления (то же, что и int())
#
#
# # Почему усечение важно?
# print((5 / 2), (5 / 2.0), (5 / -2.0), (5 / -2))         # Настоящее деление в Python 3.X
# print((5 // 2), (5 // 2.0), (5 // -2.0), (5 // -2))     # Деление с округлением в меньшую сторону в Python 3.X


# Точность целых чисел
# print(999999999999999999999999999999 + 1)
# print(2 ** 200)


# Комплексные числа
# print(1j * 1J)
# print(2 + 1j * 3)
# print((2 + 1j) * 3)


# Шестнадцатеричная, восьмеричная и двоичная форма записи: литералы и преобразования
# print(0o1, 0o20, 0o377)                 # Восьмеричные литералы: основание 8, цифры 0-7
# print(0x1, 0x10, 0xFF)                  # Шестнадцатеричные литералы: основание 16, цифры 0-9/A-F
# print(0b1, 0b10000, 0b11111111)         # Двоичные литералы: основание 2, цифры 0-1
#
# print(0xFF, (15 * (16 ** 1) + 15 * (16 ** 0)))              # Как шестнадцатеричное/двоичное число отображается на десятичное
# print(0x2F, (2 * (16 ** 1) + 15 * (16 ** 0)))
# print(0xF, 0b1111, (1 * (2 ** 3) + 1 * (2 ** 2) + 1 * (2 ** 1) + 1 * (2 ** 0)))
#
# print(oct(64), hex(64), bin(64))                # Числа => строки цифр
#
# print(64, 0o100, 0x40, 0b1000000)               # Цифры => числа в сценариях и строки
# print(int('64'), int('100', 8), int('40', 16), int('0b1000000', 2))     # Литеральные формы также поддерживаюся
# print(int('0x40', 16), int('0b1000000', 2))
#
# print(eval('64'), eval('0o100'), eval('0x40'), eval('0b1000000'))
#
# print('%o, %x, %x, %X' % (64, 64, 255, 255))
#
# X = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
# print(X)
# print(oct(X))
# print(bin(X))


# Побитовые операции
# x = 1               # Десятичное значение 1 в битах выглядит как 0001
# print(x << 2)       # Сдвиг влево на 2 бита: 0100
# print(x | 2)        # Побитовое ИЛИ (один из битов = 1): 0011
# print(x & 1)        # Побитовое И (оба бита = 1): 0001
#
# X = 0b0001          # Двоичные литералы
# print(X << 2)       # Сдвиг влево
# print(bin(X << 2))  # Строка двоичных цифр
# print(bin(X | 0b010))   # Побитовое ИЛИ: один из битов = 1
# print(bin(X & 0b1))     # Побитовое И: оба бита = 1
#
# X = 0xFF                # Шестнадцатеричные литералы
# print(bin(X))
# print(X ^ 0b10101010)   # Побитовое исключающее ИЛИ: один из битов = 1, но не оба
# print(int('01010101', 2))   # Цифры => число: строка в целое по указанному основанию
# print(hex(85))          # Число => цифры: строка шестнадцатеричных цифр
#
# X = 99
# print(bin(X), X.bit_length(), len(bin(X)) - 2)
# print(bin(256), (256).bit_length(), len(bin(256)) - 2)


# Другие встроенные инструменты для обработки чисел
# print(math.pi, math.e)                      # Общие константы
# print(math.sin(2 * math.pi / 180))          # Синус, тангенс, косинус
# print(math.sqrt(144), math.sqrt(2))         # Квадратный корень
# print(math.pow(2, 4), 2 ** 4, 2.0 ** 4.0)   # Возведение в степень
# print(abs(-42), sum((1, 2, 3, 4)))          # Абсолютное значение, суммирование
# print(min(1, 3, 2, 4), max(1 ,3, 2, 4))     # Минимум, максимум
#
# print(math.floor(2.567), math.floor(-2.567))            # Округление в меньшую сторону (до меньшего целого)
# print(math.trunc(2.567), math.trunc(-2.567))            # Усечение (отбрасывание десятичной части)
# print(int(2.567), int(-2.567))                          # Усечение (преобразование в целое число)
# print(round(2.567), round(2.456), round(2.576, 2))      # Округление
# print('%.1f' % 2.567, '{0:.2f}'.format(2.567))          # Округление для отображения
#
# print(random.random())              # Случайные числа с плавающей точкой, целые, выбор, тасование
# print(random.randint(1, 10))
# print(random.randint(1, 10))
#
# print(random.choice(['Sasha', 'Marina', 'Eva']))
# print(random.choice(['Sasha', 'Marina', 'Eva']))
#
# suits = ['hearts', 'clubs', 'diamonds', 'spades']
# random.shuffle(suits)
# print(suits)


# Другие числовые типы
# Основы десятичных чисел
# print(0.1 + 0.1 + 0.1 - 0.3)
#
# print(Decimal('0.1') + Decimal('0.1') + Decimal('0.1') - Decimal('0.3'))
# print(Decimal('0.1') + Decimal('0.10') + Decimal('0.10') - Decimal('0.3'))
# print(Decimal(0.1) + Decimal(0.10) + Decimal(0.10) - Decimal(0.3))
#
#
# # Глобальная установка точности десятичных чисел
# print(decimal.Decimal(1) / decimal.Decimal(7))          # По умолчанию: 28 цифр
# decimal.getcontext().prec = 4                           # Фиксированная точность
# print(decimal.Decimal(1) / decimal.Decimal(7))
# print(Decimal(0.1) + Decimal(0.1) + Decimal(0.1) - Decimal(0.3))        # Ближе к 0
#
# decimal.getcontext().prec = 2
# pay = decimal.Decimal(str(1999 + 1.33))
# print(pay)
#
#
# # Диспетчер контекста для десятичных чисел
# print(decimal.Decimal('1.00') / decimal.Decimal('3.00'))


# Дробный тип
# Основы дробей
# x = Fraction(1, 3)              # Числитель, знаменатель
# y = Fraction(4, 6)              # Упрощается до 2, 3 по наибольшему общему делителю
# print(x)
# print(y)
# print(x + y)                    # Результаты точны: числитель, знаменатель
# print(x - y)
# print(x * y)
#
# print(Fraction('.25'))
# print(Fraction('1.25'))
# print(Fraction('.25') + Fraction('1.25'))
#
#
# # Числовая точность дробных и десятичных типов
# a = 1 / 3.0             # Результат точен лишь настолько, насколько позволяют аппаратные средства
# b = 4 / 6.0             # Точность может теряться из-за множества вычислений
# print(a)
# print(b)
# print(a + b)
# print(a - b)
# print(a * b)
#
#
# # Преобразование дробей и разнородные типы
# print((2.5).as_integer_ratio())             # Метод объекта с плавающей точкой
# f = 2.5
# z = Fraction(*f.as_integer_ratio())         # Превращает объект с плавающей точкой в дробь: два аргумента
# print(z)                                    # То же, что и Fraction(5, 2)
# print(x)
# print(x + z)
# print(float(x))
# print(float(z))
# print(float(x + z))
# print(17 / 6)
# print(Fraction.from_float(1.75))            # Преобразует объект с плавающей точкой в дробь
# print(Fraction(*(1.75).as_integer_ratio()))


# Множества
# Литералы множеств в Python 3.X и 2.7
# set([1, 2, 3, 4])               # Вызов встроенной функции
# {1, 2, 3, 4}                    # Более новые литералы множеств (2.7, 3.Х)
# print(set([1, 2, 3, 4]))        # Встроенная функция по созданию множеств
# print(set('spam'))              # Добавить все элементы из итерируемого объекта
# print({1, 2, 3, 4})             # Литералы множеств: новые в Python 3.X (Python 2.7)
# S = {'s', 'p', 'a', 'm'}
# print(S)
# S.add('alot')                   # Методы работают как и ранее
# print(S)
#
# S1 = {1, 2, 3, 4}
# print(S1 & {1, 3})              # Пересечение
# print({1, 5, 3, 6} | S1)        # Объединение
# print(S1 - {1, 3, 4})           # Разность
# print(S1 > {1, 3})              # Надмножество
#
# print(S1 - {1, 2, 3, 4})        # Пустые множества выводятся как set()
# print(type({}))                 # Поскольку {} - пустой словарь
#
# S = set()                       # Инициализация пустого множества
# S.add(1.23)
# print(S)


# Ограничение неизменяемости и фиксированные множества
# S = {1.23}
# print(S)
#
# S.add([1, 2, 3])                # Во множестве работают только неизменяемые объекты
# S.add({'a':1})
#
# S.add((1, 2, 3))                  # Списки и словари не допускаются, но кортеж разрешены
# print(S)
#
# print(S | {(4, 5, 6), (1, 2, 3)}) # Объединение
# print((1, 2, 3) in S)             # Членство: по полным значениям
# print((1, 4, 7) in S)


# Включение множеств в Python 3.X и Python 2.7
# print({x ** 2 for x in [1, 2, 3, 4]})               # Включение множества
# print({x for x in 'spam'})                          # То же, что и set('spam')
#
# print({c * 4 for c in 'spam'})                      # Множество накопленных результатов выражения
# print({c * 4 for c in 'spamham'})
#
# S = {c * 4 for c in 'spam'}
# print(S | {'mmmm', 'xxxx'})
# print(S & {'mmmm', 'xxxx'})


# Для чего используются множества
L = [1, 2, 1, 4, 5, 3, 2]
print(set(L))
L = list(set(L))                # Удаление дубликатов (преобразование списка к множеству и далее множество к списку)
print(L)

print(list(set(['aa', 'cc', 'ff', 'xx', 'aa', 'cc'])))      # Порядок элементов может изменяться

print(set([1, 3, 5, 7]) - set([1, 2, 4, 5, 6]))             # Найти различия в списках
print(set('abcdefg') - set('abcdghij'))                     # Найти различия в строках
print(set('spam') - set(['h', 'a', 'm']))                   # Найти различия, разнородные типы
print(set(dir(bytes)) - set(dir(bytearray)))                # В bytes, но не в bytearray
print(set(dir(bytearray)) - set(dir(bytes)))

L1, L2 = [1, 2, 3, 4, 5], [2, 1, 4, 3, 5]
print(L1 == L2)                                 # В последовательностях порядок имеет значение
print(set(L1) == set(L2))                       # Проверка на равенство, нейтральное к порядку
print(sorted(L1) == sorted(L2))                 # Результаты списка упорядочены
print('spam' == 'aspm', set('spam') == set('aspm'), sorted('spam') == sorted('aspm'))

engineers = {'bob', 'sue', 'ann', 'vic'}
managers = {'tom', 'sue'}
print('bob' in engineers)                       # Является ли bob инженером
print(engineers & managers)                     # Кто одновременно инженер и менеджер
print(engineers | managers)                     # Все собтрудники в обеих категориях
print(engineers - managers)                     # Инженеры, не являющиеся менеджерами
print(managers - engineers)                     # Менеджеры, не являющиеся инженерами
print(engineers > managers)                     # Все ли менеджеры - инженеры? (надмножество)
print({'bob', 'sue'} < engineers)               # Оба ли сотрудника - инженеры? (подмножество)
print((engineers | managers) > managers)        # Все сотрудники - надмножество менеджеров?
print(managers ^ engineers)                     # Кто находится в одной категории, но не в обеих?
print((managers | engineers) - (managers ^ engineers))  # Пересечение!

